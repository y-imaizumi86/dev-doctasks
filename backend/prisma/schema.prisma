generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  project_id   BigInt         @id @default(autoincrement())
  name         String         @db.VarChar(255)
  description  String?
  created_at   DateTime       @default(now()) @db.Timestamptz
  created_by   BigInt
  updated_at   DateTime       @default(now()) @db.Timestamptz
  updated_by   BigInt
  boards       Board[]
  labels       Label[]
  tags         Tag[]
  documents    Document[]
  project_users ProjectUser[]
}

model Board {
  board_id    BigInt     @id @default(autoincrement())
  project_id  BigInt
  title       String     @db.VarChar(255)
  color_id    Int        @db.SmallInt
  created_at  DateTime   @default(now()) @db.Timestamptz
  created_by  BigInt
  updated_at  DateTime   @default(now()) @db.Timestamptz
  updated_by  BigInt
  project     Project    @relation(fields: [project_id], references: [project_id])
  lists       List[]
  board_users BoardUser[]
}

model List {
  list_id    BigInt   @id @default(autoincrement())
  board_id   BigInt
  title      String   @db.VarChar(255)
  position   Int      @db.SmallInt
  created_at DateTime @default(now()) @db.Timestamptz
  created_by BigInt
  updated_at DateTime @default(now()) @db.Timestamptz
  updated_by BigInt
  board      Board    @relation(fields: [board_id], references: [board_id])
  cards      Card[]
}

model Card {
  card_id     BigInt      @id @default(autoincrement())
  list_id     BigInt
  title       String      @db.VarChar(255)
  description String?
  position    Int         @db.SmallInt
  due_date    DateTime?   @db.Timestamptz
  created_at  DateTime    @default(now()) @db.Timestamptz
  created_by  BigInt
  updated_at  DateTime    @default(now()) @db.Timestamptz
  updated_by  BigInt
  list        List        @relation(fields: [list_id], references: [list_id])
  checklists  Checklist[]
  card_users  CardUser[]
  card_labels CardLabel[]
}

model Label {
  label_id    BigInt     @id @default(autoincrement())
  project_id  BigInt
  name        String     @db.VarChar(50)
  color_id    Int        @db.SmallInt
  created_at  DateTime   @default(now()) @db.Timestamptz
  created_by  BigInt
  updated_at  DateTime   @default(now()) @db.Timestamptz
  updated_by  BigInt
  project     Project    @relation(fields: [project_id], references: [project_id])
  card_labels CardLabel[]
}

model Checklist {
  checklist_id BigInt          @id @default(autoincrement())
  card_id      BigInt
  name         String          @db.VarChar(50)
  position     Int             @db.SmallInt
  created_at   DateTime        @default(now()) @db.Timestamptz
  created_by   BigInt
  updated_at   DateTime        @default(now()) @db.Timestamptz
  updated_by   BigInt
  card         Card            @relation(fields: [card_id], references: [card_id])
  items        ChecklistItem[]
}

model ChecklistItem {
  checklist_item_id BigInt    @id @default(autoincrement())
  checklist_id      BigInt
  title             String    @db.VarChar(255)
  is_completed      Boolean   @default(false)
  position          Int       @db.SmallInt
  created_at        DateTime  @default(now()) @db.Timestamptz
  created_by        BigInt
  updated_at        DateTime  @default(now()) @db.Timestamptz
  updated_by        BigInt
  checklist         Checklist @relation(fields: [checklist_id], references: [checklist_id])
}

model Document {
  document_id       BigInt             @id @default(autoincrement())
  project_id        BigInt
  title             String             @db.VarChar(255)
  content           String?
  parent_id         BigInt?
  is_public         Boolean            @default(false)
  created_at        DateTime           @default(now()) @db.Timestamptz
  created_by        BigInt
  updated_at        DateTime           @default(now()) @db.Timestamptz
  updated_by        BigInt
  project           Project            @relation(fields: [project_id], references: [project_id])
  parent            Document?          @relation("DocumentHierarchy", fields: [parent_id], references: [document_id])
  children          Document[]         @relation("DocumentHierarchy")
  document_versions DocumentVersion[]
  document_tags     DocumentTag[]
}

model DocumentVersion {
  version_id     BigInt   @id @default(autoincrement())
  document_id    BigInt
  title          String   @db.VarChar(255)
  content        String?
  parent_id      BigInt?
  version_number Int
  created_at     DateTime @default(now()) @db.Timestamptz
  created_by     BigInt
  document       Document @relation(fields: [document_id], references: [document_id])
}

model Tag {
  tag_id        BigInt       @id @default(autoincrement())
  project_id    BigInt
  name          String       @db.VarChar(50)
  color_id      Int          @db.SmallInt
  created_at    DateTime     @default(now()) @db.Timestamptz
  created_by    BigInt
  updated_at    DateTime     @default(now()) @db.Timestamptz
  updated_by    BigInt
  project       Project      @relation(fields: [project_id], references: [project_id])
  document_tags DocumentTag[]
}

model Attachment {
  attachment_id BigInt   @id @default(autoincrement())
  related_type  String   @db.VarChar(50)
  related_id    BigInt
  name          String   @db.VarChar(255)
  path          String   @db.VarChar(500)
  type          String   @db.VarChar(100)
  size          BigInt
  created_at    DateTime @default(now()) @db.Timestamptz
  created_by    BigInt
}

model Comment {
  comment_id   BigInt   @id @default(autoincrement())
  related_type String   @db.VarChar(50)
  related_id   BigInt
  content      String
  created_at   DateTime @default(now()) @db.Timestamptz
  created_by   BigInt
  updated_at   DateTime @default(now()) @db.Timestamptz
  updated_by   BigInt
}

model User {
  user_id         BigInt       @id @default(autoincrement())
  name            String       @db.VarChar(50)
  email           String       @unique @db.VarChar(255)
  hashed_password String       @db.VarChar(255)
  role_id         Int          @db.SmallInt
  color_id        Int          @db.SmallInt
  created_at      DateTime     @default(now()) @db.Timestamptz
  updated_at      DateTime     @default(now()) @db.Timestamptz
  role            UserRole     @relation(fields: [role_id], references: [role_id])
  color           Color        @relation(fields: [color_id], references: [color_id])
  project_users   ProjectUser[]
  board_users     BoardUser[]
  card_users      CardUser[]
}

model UserRole {
  role_id Int    @id @db.SmallInt
  name    String @db.VarChar(50)
  users   User[]
}

model Color {
  color_id Int    @id @db.SmallInt
  name     String @db.VarChar(50)
  users    User[]
}

model ProjectUser {
  project_user_id BigInt  @id @default(autoincrement())
  project_id      BigInt
  user_id         BigInt
  project         Project @relation(fields: [project_id], references: [project_id])
  user            User    @relation(fields: [user_id], references: [user_id])

  @@unique([project_id, user_id])
}

model BoardUser {
  board_user_id BigInt @id @default(autoincrement())
  board_id      BigInt
  user_id       BigInt
  board         Board  @relation(fields: [board_id], references: [board_id])
  user          User   @relation(fields: [user_id], references: [user_id])

  @@unique([board_id, user_id])
}

model CardUser {
  card_user_id BigInt @id @default(autoincrement())
  card_id      BigInt
  user_id      BigInt
  card         Card   @relation(fields: [card_id], references: [card_id])
  user         User   @relation(fields: [user_id], references: [user_id])

  @@unique([card_id, user_id])
}

model CardLabel {
  card_label_id BigInt @id @default(autoincrement())
  card_id       BigInt
  label_id      BigInt
  card          Card   @relation(fields: [card_id], references: [card_id])
  label         Label  @relation(fields: [label_id], references: [label_id])

  @@unique([card_id, label_id])
}

model DocumentTag {
  document_tag_id BigInt   @id @default(autoincrement())
  document_id     BigInt
  tag_id          BigInt
  document        Document @relation(fields: [document_id], references: [document_id])
  tag             Tag      @relation(fields: [tag_id], references: [tag_id])

  @@unique([document_id, tag_id])
}
